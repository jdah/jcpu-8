

#ORG 0X0000



#OS_CALLS:
JMP 0X00 0XB4
JMP 0X01 0X4D
JMP 0X00 0XF0
JMP 0X01 0X08
JMP 0X01 0X20
JMP 0X01 0X38
JMP 0X00 0XD8
JMP 0X01 0X8F
JMP 0X01 0XA7
JMP 0X01 0XC2
JMP 0X01 0XD7
JMP 0X02 0X04
JMP 0X02 0X31
JMP 0X02 0X46
JMP 0X02 0X61
JMP 0X02 0X7C
JMP 0X02 0X97
JMP 0X02 0XB2
JMP 0X02 0XCD
JMP 0X02 0XE8
JMP 0X03 0X03
JMP 0X03 0X18
JMP 0X03 0X30
JMP 0X03 0X45
JMP 0X03 0X60

JMP 0X05 0X8B
JMP 0X05 0XC0
JMP 0X06 0X0E
JMP 0X06 0X5C
JMP 0X06 0X88
JMP 0X06 0XB4
JMP 0X06 0XC0
JMP 0X07 0X1F
JMP 0X07 0X8B
JMP 0X08 0X16

JMP 0X03 0XAB

#BOOT_MAIN:
LDA 0XFF 0X09
SW 0X81
LDA 0XFF 0X08
SW 0XFF

LC A 0X02
LC B 0XEF
LC C 0X00
LC D 0X06
CALL 0X07 0X1F : 0X00D3

JMP 0X00 0XD3

#DB TESTSTRING "Hello, emulator world!"




#INCLUDE "modules/rpi.asm"





#RPI_DRAW_SPRITE:
LC F 0X20
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A

CALL 0X03 0X7B : 0X00EA

RET




#RPI_GEN_SPRITE:
LC F 0X01
MOV 0XFF 0X01 F

CALL 0X03 0X7B : 0X00FF

MOV A 0XFF 0X07

RET




#RPI_DEL_SPRITE:
LC F 0X02
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A

CALL 0X03 0X7B : 0X011A

RET




#RPI_BEGIN_BUILD_SPRITE:
LC F 0X03
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A

CALL 0X03 0X7B : 0X0132

RET




#RPI_STOP_BUILD_SPRITE:
LC F 0X04
MOV 0XFF 0X01 F

CALL 0X03 0X7B : 0X0147

RET




#RPI_UPLOAD_PIXEL:
LC F 0X05
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X0162

LC F 0X06
MOV 0XFF 0X01 F
MOV 0XFF 0X02 C
MOV 0XFF 0X03 D
CALL 0X03 0X7B : 0X0177

LC F 0X07
MOV 0XFF 0X01 F
MOV 0XFF 0X02 E
CALL 0X03 0X7B : 0X0189

RET




#RPI_KEYBOARD_HAS_NEXT:
LC F 0X08
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X019E

MOV A 0XFF 0X07

RET




#RPI_KEYBOARD_NEXT:
LC F 0X09
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X01B6

MOV A 0XFF 0X07
MOV B 0XFF 0X08

RET




#RPI_KEYBOARD_CLEAR_BUFFER:
LC F 0X0A
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X01D1

RET




#RPI_TRANSLATE_X:
LC F 0X0E
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
CALL 0X03 0X7B : 0X01E9

LC F 0X0B
MOV 0XFF 0X01 F
MOV 0XFF 0X02 B
MOV 0XFF 0X03 C
CALL 0X03 0X7B : 0X01FE

RET




#RPI_TRANSLATE_Y:
LC F 0X0E
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
CALL 0X03 0X7B : 0X0216

LC F 0X0C
MOV 0XFF 0X01 F
MOV 0XFF 0X02 B
MOV 0XFF 0X03 C
CALL 0X03 0X7B : 0X022B

RET




#RPI_TRANSLATE_RESET:
LC F 0X0D
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X0240

RET




#RPI_STORAGE_ADDR_HIGH:
LC F 0X0F
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X025B

RET




#RPI_STORAGE_ADDR_LOW:
LC F 0X10
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X0276

RET




#RPI_STORAGE_READ:
LC F 0X11
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X028B

MOV A 0XFF 0X07
MOV B 0XFF 0X08

RET




#RPI_STORAGE_WRITE:
LC F 0X12
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X02AC

RET




#RPI_STORAGE_SIZE_MB:
LC F 0X13
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X02C1

MOV A 0XFF 0X07
MOV B 0XFF 0X08

RET




#RPI_GRAPHICS_WIDTH:
LC F 0X17
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X02DC

MOV A 0XFF 0X07
MOV B 0XFF 0X08

RET




#RPI_GRAPHICS_HEIGHT:
LC F 0X18
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X02F7

MOV A 0XFF 0X07
MOV B 0XFF 0X08

RET




#RPI_GRAPHICS_CLEAR:
LC F 0X19
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X0312

RET




#RPI_GRAPHICS_COLOR:
LC F 0X21
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
CALL 0X03 0X7B : 0X032A

RET




#RPI_GRAPHICS_END_COLOR:
LC F 0X22
MOV 0XFF 0X01 F
CALL 0X03 0X7B : 0X033F

RET




#RPI_GRAPHICS_MOVE_X:
LC F 0X23
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X035A

RET




#RPI_GRAPHICS_MOVE_Y:
LC F 0X24
MOV 0XFF 0X01 F
MOV 0XFF 0X02 A
MOV 0XFF 0X03 B
CALL 0X03 0X7B : 0X0375

RET




#WAIT_FOR_RESPONSE:
PUSH A
MOV A 0X08 0X74
INC A
MOV 0X08 0X74 A
MOV 0XFF 0X00 A

PUSH B
MOV B 0XFF 0X06
EQU B A
JNZ B 0X03 0XA1
JMP 0X03 0X7B

#WAIT_FOR_RESPONSE__DONE:
POP B
POP A
RET

#DB NEXTRESPONSE 0X00
#INCLUDE "modules/graphics.asm"



#DEFINE GRAPHICS_CURSOR_CHARACTER 0X5F




#GRAPHICS_PRINT_STR:
PUSH C
PUSH D
PUSH E
PUSH A
PUSH B


LC A 0X00
LC B 0X00
LWA C 0X08 0X75
CALL 0X01 0XD7 : 0X03C7

LWA C 0X08 0X76
CALL 0X02 0X04 : 0X03D3

JMP 0X03 0XD8

#GRAPHICS_PRINT_STR__LOOP:
MW A H
MW B L
LW E

MW E C
EQU C 0X00
JNZ C 0X04 0X25


PUSH A
PUSH B


MW E A
CALL 0X00 0XD8 : 0X0401


LC A 0X00
LC B 0X00
LC C 0X08
CALL 0X01 0XD7 : 0X0413

POP B
POP A


CALL 0X06 0X5C : 0X0420
JMP 0X03 0XD8

#GRAPHICS_PRINT_STR__DONE:
CALL 0X02 0X31 : 0X042E

POP B
POP A
POP E
POP D
POP C
RET


#GRAPHICS_INIT:
PUSH C
PUSH D


CALL 0X02 0XCD : 0X044B
LC C 0X00
LC D 0X08
CALL 0X07 0X8B : 0X045A
MOV 0X08 0X77 B

CALL 0X02 0XE8 : 0X0466
CALL 0X07 0X8B : 0X046F
MOV 0X08 0X78 B

POP C
POP D
RET




#GRAPHICS_DRAW_CHAR:
PUSH A
PUSH B
PUSH C
PUSH D


PUSH B
MW A B
LC A 0X00
LC C 0X00
LC D 0X08
CALL 0X07 0X1F : 0X049B

MW B C
MW A B
LC A 0X00
CALL 0X01 0XD7 : 0X04AD
POP B


LC A 0X00
LC C 0X00
LC D 0X08
CALL 0X07 0X1F : 0X04C1

MW B C
MW A B
LC A 0X00
CALL 0X02 0X04 : 0X04D3

POP D
POP C
POP B
POP A


PUSH A
MW C A
CALL 0X00 0XD8 : 0X04E9
POP A


CALL 0X02 0X31 : 0X04F4

RET




#GRAPHICS_SCROLL:
PUSH A
PUSH B


LC A 0X01
LC B 0X08
CALL 0X03 0X45 : 0X050D


MOV A 0X08 0X78
DEC A
MOV 0X08 0X76 A


LC A 0X00
MOV 0X08 0X75 A

POP B
POP A
RET




#GRAPHICS_INC_CURSOR:
PUSH B
PUSH C


MOV B 0X08 0X75
MOV C 0X08 0X77
INC B
MOV 0X08 0X75 B


EQU B C
JNZ B 0X05 0X4E

POP C
POP B
RET

#GRAPHICS_INC_CURSOR__INC_Y:
LC B 0X00
MOV 0X08 0X75 B


MOV B 0X08 0X76
MOV C 0X08 0X78
INC B
MOV 0X08 0X76 B


EQU B C
JNZ B 0X05 0X78

POP C
POP B
RET

#GRAPHICS_INC_CURSOR__SCROLL:
CALL 0X04 0XFA : 0X0581
POP C
POP B
RET


#DB CURSORX 0X00
#DB CURSORY 0X00


#DB WIDTHCHARS 0X00
#DB HEIGHTCHARS 0X00
#INCLUDE "modules/math.asm"









#INT_16_EQU:
PUSH C
PUSH D

LC E 0X00

EQU C A
JNZ C 0X05 0XAA

POP D
POP C
RET

#INT_16_EQU__CHECK_LOW:
EQU D B
MW D E

POP D
POP C
RET




#INT_16_GTN:
MW A E
GTN E C
JNZ E 0X05 0XFC

MW A E
LTN E C
JNZ E 0X06 0X05


MW B E
GTN E D
JNZ E 0X05 0XFC


LC E 0X00
RET

#INT_16_GTN__TRUE:
LC E 0X01
RET

#INT_16_GTN__FALSE:
LC E 0X00
RET




#INT_16_LTN:
MW A E
GTN E C
JNZ E 0X06 0X05

MW A E
EQU A C
JNZ E 0X05 0XFC


MW B E
LTN E D
JNZ E 0X05 0XFC


LC E 0X00
RET

#INT_16_LTN__TRUE:
LC E 0X01
RET

#INT_16_LTN__FALSE:
LC E 0X00
RET




#INT_16_INC:
PUSH C

MW B C
EQU C 0XFF
JNZ F 0X06 0X7A

INC B

POP C
RET

#INT_16_INC__LOW_MAX:
LC B 0X00
INC A

POP C
RET




#INT_16_DEC:
PUSH C

MW B C
EQU C 0X00
JNZ F 0X06 0XA6

DEC B

POP C
RET

#INT_16_DEC__LOW_MIN:
LC B 0XFF
DEC A

POP C
RET




#INT_16_ADD:
ADD B D
ADC A C

RET




#INT_16_SUB:
PUSH E

MW D E
GTN E B
JNZ E 0X06 0XF3

SUB B D
SUB A C

POP E
RET


#INT_16_SUB__BORROW:

LC E 0XFF
SUB E D
ADD B E
INC B

SUB A C
DEC A

POP E
RET




#INT_16_MUL:

PUSH C
PUSH D
PUSH E

JMP 0X07 0X2A

#INT_16_MUL__LOOP:

PUSH A
PUSH B
LC A 0X00
LC B 0X00
CALL 0X05 0X8B : 0X073D
POP B
POP A

JNZ E 0X07 0X7F

PUSH C
PUSH D

MW A C
MW B D
CALL 0X06 0XB4 : 0X0759

POP D
POP C

PUSH A
PUSH B

MW C A
MW D B
CALL 0X06 0X88 : 0X0770
MW A C
MW B D

POP B
POP A

JMP 0X07 0X2A

#INT_16_MUL__DONE:
POP E
POP D
POP C
RET




#INT_16_DIV:
PUSH E


LDA 0X08 0X79
SW 0X00

LDA 0X08 0X7A
SW 0X00

JMP 0X07 0X9C

#INT_16_DIV__LOOP:
CALL 0X06 0X0E : 0X07A5
JNZ E 0X07 0XE3

CALL 0X05 0X8B : 0X07B3
JNZ E 0X07 0XF1


CALL 0X06 0XC0 : 0X07C1

PUSH A
PUSH B
MOV B 0X08 0X7A
MOV A 0X08 0X79
CALL 0X06 0X5C : 0X07D4
MOV 0X08 0X7A B
MOV 0X08 0X79 A
POP B
POP A

JMP 0X07 0X9C

#INT_16_DIV__DONE:
POP E

MOV B 0X08 0X7A
MOV A 0X08 0X79

RET

#INT_16_DIV__EQU:
PUSH A
PUSH B
MOV B 0X08 0X7A
MOV A 0X08 0X79
CALL 0X06 0X5C : 0X0804
MOV 0X08 0X7A B
MOV 0X08 0X79 A
POP B
POP A

POP E
RET




#INT_16_MOD:
PUSH E

JMP 0X08 0X1D

#INT_16_MOD__LOOP:
CALL 0X06 0X0E : 0X0826
JNZ E 0X08 0X47

CALL 0X05 0X8B : 0X0834
JNZ E 0X08 0X4F


CALL 0X06 0XC0 : 0X0842

JMP 0X08 0X1D

#INT_16_MOD__DONE:
POP E
RET

#INT_16_MOD__EQU:
POP E
LC A 0X00
LC B 0X00
RET


#DB DIVCOUNTERH 0X00
#DB DIVCOUNTERL 0X00
