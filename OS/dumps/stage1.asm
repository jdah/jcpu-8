

#ORG 0X0000



#OS_CALLS:
JMP BOOT_MAIN
JMP RPI_UPLOAD_PIXEL
JMP RPI_GEN_SPRITE
JMP RPI_DEL_SPRITE
JMP RPI_BEGIN_BUILD_SPRITE
JMP RPI_STOP_BUILD_SPRITE
JMP RPI_DRAW_SPRITE
JMP RPI_KEYBOARD_HAS_NEXT
JMP RPI_KEYBOARD_NEXT
JMP RPI_KEYBOARD_CLEAR_BUFFER
JMP RPI_TRANSLATE_X
JMP RPI_TRANSLATE_Y
JMP RPI_TRANSLATE_RESET
JMP RPI_STORAGE_ADDR_HIGH
JMP RPI_STORAGE_ADDR_LOW
JMP RPI_STORAGE_READ
JMP RPI_STORAGE_WRITE
JMP RPI_STORAGE_SIZE_MB
JMP RPI_GRAPHICS_WIDTH
JMP RPI_GRAPHICS_HEIGHT
JMP RPI_GRAPHICS_CLEAR
JMP RPI_GRAPHICS_COLOR
JMP RPI_GRAPHICS_END_COLOR
JMP RPI_GRAPHICS_MOVE_X
JMP RPI_GRAPHICS_MOVE_Y

JMP INT_16_EQU
JMP INT_16_GTN
JMP INT_16_LTN
JMP INT_16_INC
JMP INT_16_DEC
JMP INT_16_ADD
JMP INT_16_SUB
JMP INT_16_MUL
JMP INT_16_DIV
JMP INT_16_MOD

JMP GRAPHICS_PRINT_STR

#BOOT_MAIN:
LDA 0XFF 0X09
SW 0X81
LDA 0XFF, 0X08
SW 0XFF

LC A, 0X02
LC B, 0XEF
LC C, 0X00
LC D, 0X06
CALL INT_16_MUL : 0X00d3

JMP 0X00 0Xd3

#DB TESTSTRING "Hello, emulator world!"




#INCLUDE "modules/rpi.asm"





#RPI_DRAW_SPRITE:
LC F 0X20
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A

CALL WAIT_FOR_RESPONSE : 0X00ea

RET




#RPI_GEN_SPRITE:
LC F 0X01
MOV 0XFF, 0X01, F

CALL WAIT_FOR_RESPONSE : 0X00ff

MOV A, 0XFF, 0X07

RET




#RPI_DEL_SPRITE:
LC F 0X02
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A

CALL WAIT_FOR_RESPONSE : 0X011a

RET




#RPI_BEGIN_BUILD_SPRITE:
LC F 0X03
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A

CALL WAIT_FOR_RESPONSE : 0X0132

RET




#RPI_STOP_BUILD_SPRITE:
LC F 0X04
MOV 0XFF, 0X01, F

CALL WAIT_FOR_RESPONSE : 0X0147

RET




#RPI_UPLOAD_PIXEL:
LC F 0X05
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X0162

LC F, 0X06
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, C
MOV 0XFF, 0X03, D
CALL WAIT_FOR_RESPONSE : 0X0177

LC F, 0X07
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, E
CALL WAIT_FOR_RESPONSE : 0X0189

RET




#RPI_KEYBOARD_HAS_NEXT:
LC F 0X08
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X019e

MOV A, 0XFF, 0X07

RET




#RPI_KEYBOARD_NEXT:
LC F 0X09
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X01b6

MOV A, 0XFF, 0X07
MOV B, 0XFF, 0X08

RET




#RPI_KEYBOARD_CLEAR_BUFFER:
LC F 0X0A
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X01d1

RET




#RPI_TRANSLATE_X:
LC F 0X0E
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
CALL WAIT_FOR_RESPONSE : 0X01e9

LC F, 0X0B
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, B
MOV 0XFF, 0X03, C
CALL WAIT_FOR_RESPONSE : 0X01fe

RET




#RPI_TRANSLATE_Y:
LC F 0X0E
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
CALL WAIT_FOR_RESPONSE : 0X0216

LC F, 0X0C
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, B
MOV 0XFF, 0X03, C
CALL WAIT_FOR_RESPONSE : 0X022b

RET




#RPI_TRANSLATE_RESET:
LC F 0X0D
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X0240

RET




#RPI_STORAGE_ADDR_HIGH:
LC F 0X0F
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X025b

RET




#RPI_STORAGE_ADDR_LOW:
LC F 0X10
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X0276

RET




#RPI_STORAGE_READ:
LC F 0X11
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X028b

MOV A, 0XFF, 0X07
MOV B, 0XFF, 0X08

RET




#RPI_STORAGE_WRITE:
LC F 0X12
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X02ac

RET




#RPI_STORAGE_SIZE_MB:
LC F 0X13
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X02c1

MOV A, 0XFF, 0X07
MOV B, 0XFF, 0X08

RET




#RPI_GRAPHICS_WIDTH:
LC F 0X17
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X02dc

MOV A, 0XFF, 0X07
MOV B, 0XFF, 0X08

RET




#RPI_GRAPHICS_HEIGHT:
LC F 0X18
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X02f7

MOV A, 0XFF, 0X07
MOV B, 0XFF, 0X08

RET




#RPI_GRAPHICS_CLEAR:
LC F 0X19
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X0312

RET




#RPI_GRAPHICS_COLOR:
LC F 0X21
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
CALL WAIT_FOR_RESPONSE : 0X032a

RET




#RPI_GRAPHICS_END_COLOR:
LC F 0X22
MOV 0XFF, 0X01, F
CALL WAIT_FOR_RESPONSE : 0X033f

RET




#RPI_GRAPHICS_MOVE_X:
LC F 0X23
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X035a

RET




#RPI_GRAPHICS_MOVE_Y:
LC F 0X24
MOV 0XFF, 0X01, F
MOV 0XFF, 0X02, A
MOV 0XFF, 0X03, B
CALL WAIT_FOR_RESPONSE : 0X0375

RET




#WAIT_FOR_RESPONSE:
PUSH A
MOV A NEXTRESPONSE
INC A
MOV NEXTRESPONSE A
MOV 0XFF, 0X00, A

PUSH B
MOV B, 0XFF, 0X06
EQU B, A
JNZ B WAIT_FOR_RESPONSE__DONE
JMP WAIT_FOR_RESPONSE

#WAIT_FOR_RESPONSE__DONE:
POP B
POP A
RET

#DB NEXTRESPONSE 0X00
#INCLUDE "modules/graphics.asm"



#DEFINE GRAPHICS_CURSOR_CHARACTER 0X5F




#GRAPHICS_PRINT_STR:
PUSH C
PUSH D
PUSH E
PUSH A
PUSH B


LC A, 0X00
LC B, 0X00
LWA C, CURSORX.H, CURSORX.L
CALL RPI_TRANSLATE_X : 0X03c7

LWA C, CURSORY.H, CURSORY.L
CALL RPI_TRANSLATE_Y : 0X03d3

JMP GRAPHICS_PRINT_STR__LOOP

#GRAPHICS_PRINT_STR__LOOP:
MW A H
MW B, L
LW E

MW E, C
EQU C, 0X00
JNZ C, GRAPHICS_PRINT_STR__DONE


PUSH A
PUSH B


MW E, A
CALL RPI_DRAW_SPRITE : 0X0401


LC A, 0X00
LC B, 0X00
LC C, 0X08
CALL RPI_TRANSLATE_X : 0X0413

POP B
POP A


CALL INT_16_INC : 0X0420
JMP GRAPHICS_PRINT_STR__LOOP

#GRAPHICS_PRINT_STR__DONE:
CALL RPI_TRANSLATE_RESET : 0X042e

POP B
POP A
POP E
POP D
POP C
RET


#GRAPHICS_INIT:
PUSH C
PUSH D


CALL RPI_GRAPHICS_WIDTH : 0X044b
LC C, 0X00
LC D, 0X08
CALL INT_16_DIV : 0X045a
MOV WIDTHCHARS.H, WIDTHCHARS.L, B

CALL RPI_GRAPHICS_HEIGHT : 0X0466
CALL INT_16_DIV : 0X046f
MOV HEIGHTCHARS.H, HEIGHTCHARS.L, B

POP C
POP D
RET




#GRAPHICS_DRAW_CHAR:
PUSH A
PUSH B
PUSH C
PUSH D


PUSH B
MW A, B
LC A, 0X00
LC C, 0X00
LC D, 0X08
CALL INT_16_MUL : 0X049b

MW B, C
MW A, B
LC A, 0X00
CALL RPI_TRANSLATE_X : 0X04ad
POP B


LC A, 0X00
LC C, 0X00
LC D, 0X08
CALL INT_16_MUL : 0X04c1

MW B, C
MW A, B
LC A, 0X00
CALL RPI_TRANSLATE_Y : 0X04d3

POP D
POP C
POP B
POP A


PUSH A
MW C, A
CALL RPI_DRAW_SPRITE : 0X04e9
POP A


CALL RPI_TRANSLATE_RESET : 0X04f4

RET




#GRAPHICS_SCROLL:
PUSH A
PUSH B


LC A, 0X01
LC B, 0X08
CALL RPI_GRAPHICS_MOVE_X : 0X050d


MOV A, HEIGHTCHARS.H, HEIGHTCHARS.L
DEC A
MOV CURSORY.H, CURSORY.L, A


LC A, 0X00
MOV CURSORX.H, CURSORX.L, A

POP B
POP A
RET




#GRAPHICS_INC_CURSOR:
PUSH B
PUSH C


MOV B, CURSORX.H, CURSORX.L
MOV C, WIDTHCHARS.H, WIDTHCHARS.L
INC B
MOV CURSORX.H, CURSORX.L, B


EQU B, C
JNZ B, GRAPHICS_INC_CURSOR__INC_Y

POP C
POP B
RET

#GRAPHICS_INC_CURSOR__INC_Y:
LC B 0X00
MOV CURSORX.H, CURSORX.L, B


MOV B, CURSORY.H, CURSORY.L
MOV C, HEIGHTCHARS.H, HEIGHTCHARS.L
INC B
MOV CURSORY.H, CURSORY.L, B


EQU B, C
JNZ B, GRAPHICS_INC_CURSOR__SCROLL

POP C
POP B
RET

#GRAPHICS_INC_CURSOR__SCROLL:
CALL GRAPHICS_SCROLL : 0X0581
POP C
POP B
RET


#DB CURSORX 0X00
#DB CURSORY 0X00


#DB WIDTHCHARS 0X00
#DB HEIGHTCHARS 0X00
#INCLUDE "modules/math.asm"









#INT_16_EQU:
PUSH C
PUSH D

LC E, 0X00

EQU C, A
JNZ C, INT_16_EQU__CHECK_LOW

POP D
POP C
RET

#INT_16_EQU__CHECK_LOW:
EQU D B
MW D, E

POP D
POP C
RET




#INT_16_GTN:
MW A E
GTN E, C
JNZ E, INT_16_GTN__TRUE

MW A, E
LTN E, C
JNZ E, INT_16_GTN__FALSE


MW B, E
GTN E, D
JNZ E, INT_16_GTN__TRUE


LC E, 0X00
RET

#INT_16_GTN__TRUE:
LC E 0X01
RET

#INT_16_GTN__FALSE:
LC E 0X00
RET




#INT_16_LTN:
MW A E
GTN E, C
JNZ E, INT_16_GTN__FALSE

MW A, E
EQU A, C
JNZ E, INT_16_GTN__TRUE


MW B, E
LTN E, D
JNZ E, INT_16_GTN__TRUE


LC E, 0X00
RET

#INT_16_LTN__TRUE:
LC E 0X01
RET

#INT_16_LTN__FALSE:
LC E 0X00
RET




#INT_16_INC:
PUSH C

MW B, C
EQU C, 0XFF
JNZ F, INT_16_INC__LOW_MAX

INC B

POP C
RET

#INT_16_INC__LOW_MAX:
LC B 0X00
INC A

POP C
RET




#INT_16_DEC:
PUSH C

MW B, C
EQU C, 0X00
JNZ F, INT_16_DEC__LOW_MIN

DEC B

POP C
RET

#INT_16_DEC__LOW_MIN:
LC B 0XFF
DEC A

POP C
RET




#INT_16_ADD:
ADD B D
ADC A, C

RET




#INT_16_SUB:
PUSH E

MW D, E
GTN E, B
JNZ E, INT_16_SUB__BORROW

SUB B, D
SUB A, C

POP E
RET


#INT_16_SUB__BORROW:

LC E 0XFF
SUB E, D
ADD B, E
INC B

SUB A, C
DEC A

POP E
RET




#INT_16_MUL:

PUSH C
PUSH D
PUSH E

JMP INT_16_MUL__LOOP

#INT_16_MUL__LOOP:

PUSH A
PUSH B
LC A, 0X00
LC B, 0X00
CALL INT_16_EQU : 0X073d
POP B
POP A

JNZ E, INT_16_MUL__DONE

PUSH C
PUSH D

MW A, C
MW B, D
CALL INT_16_ADD : 0X0759

POP D
POP C

PUSH A
PUSH B

MW C, A
MW D, B
CALL INT_16_DEC : 0X0770
MW A, C
MW B, D

POP B
POP A

JMP INT_16_MUL__LOOP

#INT_16_MUL__DONE:
POP E
POP D
POP C
RET




#INT_16_DIV:
PUSH E


LDA DIVCOUNTERH.H, DIVCOUNTERH.L
SW 0X00

LDA DIVCOUNTERL.H, DIVCOUNTERL.L
SW 0X00

JMP INT_16_DIV__LOOP

#INT_16_DIV__LOOP:
CALL INT_16_LTN : 0X07a5
JNZ E, INT_16_DIV__DONE

CALL INT_16_EQU : 0X07b3
JNZ E, INT_16_DIV__EQU


CALL INT_16_SUB : 0X07c1

PUSH A
PUSH B
MOV B, DIVCOUNTERL.H, DIVCOUNTERL.L
MOV A, DIVCOUNTERH.H, DIVCOUNTERH.L
CALL INT_16_INC : 0X07d4
MOV DIVCOUNTERL.H, DIVCOUNTERL.L, B
MOV DIVCOUNTERH.H, DIVCOUNTERH.L, A
POP B
POP A

JMP INT_16_DIV__LOOP

#INT_16_DIV__DONE:
POP E

MOV B, DIVCOUNTERL.H, DIVCOUNTERL.L
MOV A, DIVCOUNTERH.H, DIVCOUNTERH.L

RET

#INT_16_DIV__EQU:
PUSH A
PUSH B
MOV B, DIVCOUNTERL.H, DIVCOUNTERL.L
MOV A, DIVCOUNTERH.H, DIVCOUNTERH.L
CALL INT_16_INC : 0X0804
MOV DIVCOUNTERL.H, DIVCOUNTERL.L, B
MOV DIVCOUNTERH.H, DIVCOUNTERH.L, A
POP B
POP A

POP E
RET




#INT_16_MOD:
PUSH E

JMP INT_16_MOD__LOOP

#INT_16_MOD__LOOP:
CALL INT_16_LTN : 0X0826
JNZ E, INT_16_MOD__DONE

CALL INT_16_EQU : 0X0834
JNZ E, INT_16_MOD__EQU


CALL INT_16_SUB : 0X0842

JMP INT_16_MOD__LOOP

#INT_16_MOD__DONE:
POP E
RET

#INT_16_MOD__EQU:
POP E
LC A, 0X00
LC B, 0X00
RET


#DB DIVCOUNTERH 0X00
#DB DIVCOUNTERL 0X00
